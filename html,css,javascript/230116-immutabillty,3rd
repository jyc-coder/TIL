## JavsScript

### 3차 과제 설명
강사님이 직접 제작하신 api를 사용해서 TODO 리스트 사이트를 제작한다.

- api를 사용하는 방법을 가르쳐 주셨음.

- 기본적인 기능 구현은 쉽지만, 고도화 작업을 하는 것이 문제일 것이라고 강조하심

- 생성 버튼을 클릭했을때, 버튼 안에 로딩애니메이션을 구현해서 사용자에게 생성중이라는 사실을 시각화하는 작업이 있었으면 좋겠다고 하심

- 저번시간에 배운 모듈화를 사용해서 코드를 컴팩트하게 구현해볼 것 

- api key와 유저 아이디를 숨기는 작업도 해볼 것


4차 과제 전에 연습을 빡세게 시키려는 의도인것 같아서 조금 떨린다... 



### 불변성과 가변성

메모리에 할당되는 데이터중 원시형 데이터는 메모리에 똑같은 데이터가 생성되지 않는다.


```js

let a = { x: 1 }
let b = a
```
만약 이런 형태로 변수가 선언되었다면 메모리에는 아래와 같이 구성되게 된다.
메모리 하나에는 하나의 데이터가 들어야가 하므로 `1`은 M2로 저장되고, `a`는 M1에서 x가 `1`이 저장되어있는 M2를 바라보게 되는 것이다. 
b에다가 a를 대입했기 때문에 b는 M1을 바라보게 된다.


M1 |M2 | M3| M4
:--:|:--:|:--:|:--:|
{x : m2} |1|


그럼 만약에 

```js
b.x = 7
```
이렇게 값을 변경한다면 어떻게 될까? M2에 눌러앉아있는 1이 사라질까?


M1 |M2 | M3| M4
:--:|:--:|:--:|:--:|
{x : m3} |1|7|

이렇게 새로운 메모리 장소에 `7`이 들어가게된다..
그럼 만약에 아래처럼 a와 b를 콘솔로 보게되면 어떻게 될까?

```js
console.log(a) // x:7
console.log(b) // x:7
```
두개가 같은 값이 되어버린다.

`a`는 `M1`을 바라보고 있었다. 그런데 `b`의 `x`값을 변경하게 되면서 `M1`에 있었는 `x`가 `M3`를 바라보게 되었기 때문에 `a` 의 값을 출력해도 `x`가 바라보는 메모리의 주소가 바뀐상태이기 때문에 똑같이 `7`이 나오게 된다.


따라서 `불변성`은 "원시 데이터가 저장된 메모리 주소는 변동되지 않는다" 는 뜻이고, 객체데이터의 값은 요소가 바라보는 메모리 주소에 따라 값이 변동되는 것이 바로 `가변성`이다.

만약 원본 객체 데이터가 변동되는것을 원하지 않는다면 얕은 복사를 해주면 된다.

```js
{...객체}
```

```js
const a = {x:[1,2]}
let b = {...a}


b.x = 7

console.log(a) // {x : [1,2]}
console.log(b) // {x : 7}
```

M1 |M2 | M3| M4
:--:|:--:|:--:|:--:|
{x : m2} |[m3,m4]|1|2
M4 |M5 | M7| M8
new {x: m2}|7|

얕은 복사로 객체를 복사하면 위의 표처럼 다른 메모리 장소에 새로운 객체 데이터가 저장된다. 
그럼 만약에 `b` 데이터의 배열요소 값을 변동하면어떻게 될까?

```js
const a = {x:[1,2]}
let b = {...a}


b.x[1] = 7

console.log(a) // {x : [1,7]}
console.log(b) // {x : [1,7]}
```
값이 같아진다. 얕은 복사는 참조데이터 내부의 참조 데이터는 복사되지 않은것이다. 이에 대한 대처를 하기 위한 방법으로 `깊은 복사`가 존재한다.
`_.cloneDeep(value)`

```js
const a = {x:[1,2]}
let b = _.cloneDeep(a)


b.x[1] = 7

console.log(a) // {x : [1,2]}
console.log(b) // {x : [1,7]}
```

